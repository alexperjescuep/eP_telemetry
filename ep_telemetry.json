[
    {
        "id": "15a0d5c9.3b9b92",
        "type": "tab",
        "label": "Telemetry Data Streaming",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ecb0dc75.e2c838",
        "type": "tab",
        "label": "Price scrapper",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f949f4.debdf6",
        "type": "tab",
        "label": "Website Contact Form",
        "disabled": false,
        "info": ""
    },
    {
        "id": "812297d7.4a626",
        "type": "tab",
        "label": "ProspectSoft reporting",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a76d987b.d992d",
        "type": "amazon config",
        "z": "",
        "name": "AWS",
        "region": "eu-west-1",
        "proxyRequired": false,
        "proxy": ""
    },
    {
        "id": "9b72deb0.1309b",
        "type": "dropbox-config",
        "z": "",
        "name": ""
    },
    {
        "id": "e288eb3f.29a54",
        "type": "bigquery-config",
        "z": ""
    },
    {
        "id": "e0691b19.afee48",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ba508030.cd154",
        "type": "tls-config",
        "z": "",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "critica-promate-com.pem",
        "keyname": "critica-promate-com-chain.pem",
        "caname": "",
        "servername": "",
        "verifyservercert": true
    },
    {
        "id": "8acedcb.f54ab2",
        "type": "gauth",
        "z": ""
    },
    {
        "id": "683a339d.bc7bec",
        "type": "websocket-listener",
        "z": "",
        "path": "/contact-form/receive",
        "wholemsg": "false"
    },
    {
        "id": "23889661.c1e502",
        "type": "AWS SQS",
        "z": "15a0d5c9.3b9b92",
        "aws": "a76d987b.d992d",
        "operation": "ReceiveMessage",
        "QueueUrl": "https://sqs.eu-west-1.amazonaws.com/935852492816/Nayax-Dex-DLQ",
        "Label": "",
        "AWSAccountIds": "",
        "Actions": "",
        "ReceiptHandle": "",
        "VisibilityTimeout": "",
        "Entries": "",
        "QueueName": "",
        "MessageBody": "",
        "Attributes": "",
        "Tags": "",
        "TagKeys": "",
        "name": "Receive SQS message",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "346ed3a9.507cb4"
            ],
            []
        ]
    },
    {
        "id": "a7ab23e.25b12e",
        "type": "inject",
        "z": "15a0d5c9.3b9b92",
        "name": "Check SQS",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "f09d09e7.1580e"
            ]
        ]
    },
    {
        "id": "2f7a05d.72d887a",
        "type": "AWS SQS",
        "z": "15a0d5c9.3b9b92",
        "aws": "a76d987b.d992d",
        "operation": "DeleteMessage",
        "QueueUrl": "https://sqs.eu-west-1.amazonaws.com/935852492816/Nayax-Dex-DLQ",
        "Label": "",
        "AWSAccountIds": "",
        "Actions": "",
        "ReceiptHandle": "msg.encodedReceiptHandle",
        "VisibilityTimeout": "",
        "Entries": "",
        "QueueName": "",
        "MessageBody": "",
        "Attributes": "",
        "Tags": "",
        "TagKeys": "",
        "name": "Delete Message",
        "x": 500,
        "y": 440,
        "wires": [
            [],
            [
                "1e21880e.6a5cd8"
            ]
        ]
    },
    {
        "id": "1e21880e.6a5cd8",
        "type": "debug",
        "z": "15a0d5c9.3b9b92",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1030,
        "y": 380,
        "wires": []
    },
    {
        "id": "77ce4b39.6b57b4",
        "type": "function",
        "z": "15a0d5c9.3b9b92",
        "name": "Encode ReceiptHandle",
        "func": "var encReceiptHandle = encodeURIComponent(msg.payload.Messages[0].ReceiptHandle)\nmsg.encodedReceiptHandle = encReceiptHandle;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 380,
        "wires": [
            [
                "2f7a05d.72d887a"
            ]
        ]
    },
    {
        "id": "18170c1.8e490f4",
        "type": "function",
        "z": "15a0d5c9.3b9b92",
        "name": "Parse DEX",
        "func": "//ADMIN\n//first parse pass to isolate elements\nparsedJSON = JSON.parse(msg.payload.Body);\n//isolate receiveCount\nvar machineDate = msg.payload.Body.match(\n  /(?:MachineDate\":\")([0-9]{8}).([0-9]{6})/\n);\nvar HWSerial = msg.payload.Body.match(\n  /(?:HWSerial\":\")([0-9]*)/\n);\n\n//split DexData into PA1 objects\nvar dexLines = parsedJSON.DexData.toString().split(\"PA1\");\n//find PA1 object that contains CAPPUCCINO\nvar cappuccinoData = dexLines.filter((s) => s.includes(\"CAPPUCCINO\"));\n//find PA1 object that contains CAFFE LATTE\nvar caffeeLatteData = dexLines.filter((s) => s.includes(\"CAFFE LATTE\"));\n//find PA1 object that contains WHITE COFFEE\nvar whiteCoffeeData = dexLines.filter((s) => s.includes(\"WHITE COFFEE\"));\n//find PA1 object that contains AMERICANO\nvar americanoData = dexLines.filter((s) => s.includes(\"AMERICANO\"));\n//find PA1 object that contains FLAT WHITE\nvar flatWhiteData = dexLines.filter((s) => s.includes(\"FLAT WHITE\"));\n//find PA1 object that contains DOUBLE ESPRESSO\nvar doubleEspressoData = dexLines.filter((s) => s.includes(\"DOUBLE ESPRESSO\"));\n//find PA1 object that contains CAFFE MOCHA\nvar caffeeMochaData = dexLines.filter((s) => s.includes(\"CAFFE MOCHA\"));\n//find PA1 object that contains HOT CHOCOLATE\nvar hotChocolateData = dexLines.filter((s) => s.includes(\"HOT CHOCOLATE\"));\n//find PA1 object that contains BLACK TEA\nvar blackTeaData = dexLines.filter((s) => s.includes(\"BLACK TEA\"));\n//find PA1 object that contains WHITE TEA\nvar whiteTeaData = dexLines.filter((s) => s.includes(\"WHITE TEA\"));\nif (msg.payload.Body.includes(\"CARAMEL\")) {\n  //find PA1 object that contains CARAMEL\n  var caramelData = dexLines.filter((s) => s.includes(\"CARAMEL\"));\n}\nif (msg.payload.Body.includes(\"VANILLA\")) {\n  //find PA1 object that contains VANILLA\n  var vanillaData = dexLines.filter((s) => s.includes(\"VANILLA\"));\n}\nif (dexLines.includes(\"HAZELNUT\")) {\n  //find PA1 object that contains HAZELNUT\n  var hazelnutData = dexLines.filter((s) => s.includes(\"HAZELNUT\"));\n}\nif (dexLines.includes(\"TOMATO\")) {\n  //find PA1 object that contains TOMATO\n  var tomatoSoupData = dexLines.filter((s) => s.includes(\"TOMATO SOUP\"));\n}\n\n//find PA4 and split cappuccinoSalesVal & cappuccinoTestVendVal\nvar cappuccinoSalesVal = cappuccinoData[0].match(/(PA4)\\*([0-9]*)/);\nvar cappuccinoTestVendVal = cappuccinoData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split caffeeLatteSalesVal & caffeeLatteTestVendVal\nvar caffeeLatteSalesVal = caffeeLatteData[0].match(/(PA4)\\*([0-9]*)/);\nvar caffeeLatteTestVendVal = caffeeLatteData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split whiteCoffeeSalesVal & whiteCoffeeTestVendVal\nvar whiteCoffeeSalesVal = whiteCoffeeData[0].match(/(PA4)\\*([0-9]*)/);\nvar whiteCoffeeTestVendVal = whiteCoffeeData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split americanoSalesVal & americanoTestVendVal\nvar americanoSalesVal = americanoData[0].match(/(PA4)\\*([0-9]*)/);\nvar americanoTestVendVal = americanoData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split flatWhiteSalesVal & flatWhiteTestVendVal\nvar flatWhiteSalesVal = flatWhiteData[0].match(/(PA4)\\*([0-9]*)/);\nvar flatWhiteTestVendVal = flatWhiteData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split doubleEspressoSalesVal & doubleEspressoTestVendVal\nvar doubleEspressoSalesVal = doubleEspressoData[0].match(/(PA4)\\*([0-9]*)/);\nvar doubleEspressoTestVendVal = doubleEspressoData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split caffeeMochaSalesVal & caffeeMochaTestVendVal\nvar caffeeMochaSalesVal = caffeeMochaData[0].match(/(PA4)\\*([0-9]*)/);\nvar caffeeMochaTestVendVal = caffeeMochaData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split hotChocolateSalesVal & hotChocolateTestVendVal\nvar hotChocolateSalesVal = hotChocolateData[0].match(/(PA4)\\*([0-9]*)/);\nvar hotChocolateTestVendVal = hotChocolateData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split blackTeaSalesVal & blackTeaTestVendVal\nvar blackTeaSalesVal = blackTeaData[0].match(/(PA4)\\*([0-9]*)/);\nvar blackTeaTestVendVal = blackTeaData[0].match(/(PA3)\\*([0-9]*)/);\n//find PA4 and split whiteTeaSalesVal & whiteTeaTestVendVal\nvar whiteTeaSalesVal = whiteTeaData[0].match(/(PA4)\\*([0-9]*)/);\nvar whiteTeaTestVendVal = whiteTeaData[0].match(/(PA3)\\*([0-9]*)/);\nif (caramelData !== null) {\n  //find PA4 and split caramelSalesVal & caramelTestVendVal\n  var caramelSalesVal = caramelData[0].match(/(PA4)\\*([0-9]*)/);\n  var caramelTestVendVal = caramelData[0].match(/(PA3)\\*([0-9]*)/);\n}\nif (vanillaData !== null) {\n  //find PA4 and split vanillaSalesVal & vanillaTestVendVal\n  var vanillaSalesVal = vanillaData[0].match(/(PA4)\\*([0-9]*)/);\n  var vanillaTestVendVal = vanillaData[0].match(/(PA3)\\*([0-9]*)/);\n}\nif (dexLines.includes(\"HAZELNUT\")) {\n  //find PA4 and split hazelnutSalesVal & hazelnutTestVendVal\n  var hazelnutSalesVal = hazelnutData[0].match(/(PA4)\\*([0-9]*)/);\n  var hazelnutTestVendVal = hazelnutData[0].match(/(PA3)\\*([0-9]*)/);\n}\nif (dexLines.includes(\"TOMATO\")) {\n  //find PA4 and split tomatoSoupSalesVal & tomatoSoupTestVendVal\n  var tomatoSoupSalesVal = tomatoSoupData[0].match(/(PA4)\\*([0-9]*)/);\n  var tomatoSoupTestVendVal = tomatoSoupData[0].match(/(PA3)\\*([0-9]*)/);\n}\n\n//include SalesVal and TestVendVal in msg.payload\nmsg.payload.machineDate = machineDate[1] + machineDate[2];\n//msg.payload.machineTime = machineDate[2];\nmsg.payload.HWSerial = HWSerial[1];\nmsg.payload.cappuccinoSales = cappuccinoSalesVal[2];\nmsg.payload.cappuccinoTestVend = cappuccinoTestVendVal[2];\nmsg.payload.caffeeLatteSales = caffeeLatteSalesVal[2];\nmsg.payload.caffeeLatteTestVend = caffeeLatteTestVendVal[2];\nmsg.payload.whiteCoffeeSales = whiteCoffeeSalesVal[2];\nmsg.payload.whiteCoffeeTestVend = whiteCoffeeTestVendVal[2];\nmsg.payload.americanoSales = americanoSalesVal[2];\nmsg.payload.americanoTestVend = americanoTestVendVal[2];\nmsg.payload.flatWhiteSales = flatWhiteSalesVal[2];\nmsg.payload.flatWhiteTestVend = flatWhiteTestVendVal[2];\nmsg.payload.doubleEspressoSales = doubleEspressoSalesVal[2];\nmsg.payload.doubleEspressoTestVend = doubleEspressoTestVendVal[2];\nmsg.payload.caffeeMochaSales = caffeeMochaSalesVal[2];\nmsg.payload.caffeeMochaTestVend = caffeeMochaTestVendVal[2];\nmsg.payload.hotChocolateSales = hotChocolateSalesVal[2];\nmsg.payload.hotChocolateTestVend = hotChocolateTestVendVal[2];\nmsg.payload.blackTeaSales = blackTeaSalesVal[2];\nmsg.payload.blackTeaTestVend = blackTeaTestVendVal[2];\nmsg.payload.whiteTeaSales = whiteTeaSalesVal[2];\nmsg.payload.whiteTeaTestVend = whiteTeaTestVendVal[2];\nif (dexLines.includes(\"VANILLA\")) {\n  msg.payload.vanillaSales = vanillaSalesVal[2];\n  msg.payload.vanillaTestVend = vanillaTestVendVal[2];\n}\nif (dexLines.includes(\"CARAMEL\")) {\n  msg.payload.caramelSales = caramelSalesVal[2];\n  msg.payload.caramelTestVend = caramelTestVendVal[2];\n}\nif (dexLines.includes(\"HAZELNUT\")) {\n  msg.payload.hazelnutSales = hazelnutSalesVal[2];\n  msg.payload.hazelnutTestVend = hazelnutTestVendVal[2];\n}\nif (dexLines.includes(\"TOMATO\")) {\n  msg.payload.tomatoSoupSales = tomatoSoupSalesVal[2];\n  msg.payload.tomatoSoupTestVend = tomatoSoupTestVendVal[2];\n}\n\n// debug data\n//    msg.parsedJSON = parsedJSON;\n// msg.lines = dexLines;\n// msg.cappuccinoData = cappuccinoData;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "e4e1c7ad.9a724"
            ]
        ]
    },
    {
        "id": "4eb8174f.23eef8",
        "type": "file",
        "z": "15a0d5c9.3b9b92",
        "name": "Save to file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "e207f7b0.37d498"
            ]
        ]
    },
    {
        "id": "e207f7b0.37d498",
        "type": "dropbox out",
        "z": "15a0d5c9.3b9b92",
        "dropbox": "9b72deb0.1309b",
        "filename": "",
        "localFilename": "",
        "name": "Back-up DEX data to Dropbox",
        "x": 510,
        "y": 540,
        "wires": []
    },
    {
        "id": "fe48ac50.d9ed58",
        "type": "bigquery insert",
        "z": "15a0d5c9.3b9b92",
        "bigquery": "e288eb3f.29a54",
        "dataset": "test",
        "table": "test_table_3",
        "name": "Write Test BigQuery",
        "x": 900,
        "y": 280,
        "wires": []
    },
    {
        "id": "a6c9e422.6aaea",
        "type": "change",
        "z": "15a0d5c9.3b9b92",
        "name": "Change payload",
        "rules": [
            {
                "t": "delete",
                "p": "payload.Body",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.ReceiptHandle",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.MD5OfBody",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.Attributes",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 280,
        "wires": [
            [
                "fe48ac50.d9ed58",
                "1e21880e.6a5cd8"
            ]
        ]
    },
    {
        "id": "f09d09e7.1580e",
        "type": "function",
        "z": "15a0d5c9.3b9b92",
        "name": "Set SQS Query Attributes",
        "func": "msg.MaxNumberOfMessages = '1'\nmsg.AttributeNames = ['ApproximateReceiveCount']\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "23889661.c1e502"
            ]
        ],
        "inputLabels": [
            "Input"
        ],
        "icon": "node-red-dashboard/ui_numeric.png"
    },
    {
        "id": "346ed3a9.507cb4",
        "type": "bigsplitter",
        "z": "15a0d5c9.3b9b92",
        "name": "Split payload.Messages array",
        "property": "payload.Messages",
        "x": 230,
        "y": 340,
        "wires": [
            [
                "18170c1.8e490f4",
                "1e21880e.6a5cd8"
            ],
            []
        ]
    },
    {
        "id": "9b47c244.320bb",
        "type": "inject",
        "z": "ecb0dc75.e2c838",
        "name": "Trigger",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "2d91187e.5bab18",
                "31654540.a53cd2",
                "33f41860.d84ed",
                "bb0390f.064e47",
                "c9321587.f7c85"
            ]
        ]
    },
    {
        "id": "14249e12.3ff73a",
        "type": "html",
        "z": "ecb0dc75.e2c838",
        "name": "",
        "property": "payload",
        "outproperty": "payload",
        "tag": "p.price",
        "ret": "html",
        "as": "single",
        "x": 610,
        "y": 120,
        "wires": [
            [
                "2a3c52ca.6fb036"
            ]
        ]
    },
    {
        "id": "2d91187e.5bab18",
        "type": "http request",
        "z": "ecb0dc75.e2c838",
        "name": "Covex 5 70% Litre Gel",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://www.covexgels.co.uk/product/view/200132",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 340,
        "y": 120,
        "wires": [
            [
                "14249e12.3ff73a"
            ]
        ]
    },
    {
        "id": "ff7da24.dae61e",
        "type": "change",
        "z": "ecb0dc75.e2c838",
        "name": "Extract Price",
        "rules": [
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "&#xA3;",
                "fromt": "str",
                "to": "",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "payload[3]",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload[4]",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload[5]",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "b58ce3e.ff5eda",
                "ab44d67e.d3cc1"
            ]
        ]
    },
    {
        "id": "2a3c52ca.6fb036",
        "type": "function",
        "z": "ecb0dc75.e2c838",
        "name": "Push Date/Name to Array",
        "func": "var now = new Date()\nvar x = now.toLocaleString()\nmsg.datetime = x\n\nvar productName = \"Covex 5 Litre Gel 70%\";\nmsg.payload.splice(0,0,productName);\nmsg.payload.splice(0,0,msg.datetime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "ff7da24.dae61e"
            ]
        ]
    },
    {
        "id": "8e930e2d.200df",
        "type": "html",
        "z": "ecb0dc75.e2c838",
        "name": "Get 5l price",
        "property": "payload",
        "outproperty": "payload",
        "tag": "#N3_ > option:nth-child(8)",
        "ret": "html",
        "as": "single",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "3715b6cc.306502"
            ]
        ]
    },
    {
        "id": "31654540.a53cd2",
        "type": "http request",
        "z": "ecb0dc75.e2c838",
        "name": "Hydra Hand Sanitiser Gel 70% Alcohol",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://www.hydra-int.com/hydra-hand-sanitiser.html?gclid=EAIaIQobChMIs_yE_NW16QIVCfhRCh0OSguxEAMYAyAAEgKvgvD_BwE",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "8e930e2d.200df"
            ]
        ]
    },
    {
        "id": "457389c.05c5078",
        "type": "change",
        "z": "ecb0dc75.e2c838",
        "name": "Extract Price",
        "rules": [
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "5L:&#xA0; &#xA3;",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "b58ce3e.ff5eda"
            ]
        ]
    },
    {
        "id": "3715b6cc.306502",
        "type": "function",
        "z": "ecb0dc75.e2c838",
        "name": "Push Date/Name to Array",
        "func": "var now = new Date()\nvar x = now.toLocaleString()\nmsg.datetime = x\n\nvar productName = \"Hydra Hand Sanitiser Gel 70%\";\nmsg.payload.splice(0,0,productName);\nmsg.payload.splice(0,0,msg.datetime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 180,
        "wires": [
            [
                "457389c.05c5078"
            ]
        ]
    },
    {
        "id": "e9cf40d4.9ad888",
        "type": "html",
        "z": "ecb0dc75.e2c838",
        "name": "Get paragraph",
        "property": "payload",
        "outproperty": "payload",
        "tag": "p.price > span:nth-child(1)",
        "ret": "html",
        "as": "single",
        "x": 640,
        "y": 240,
        "wires": [
            [
                "f8ba7cbd.09934"
            ]
        ]
    },
    {
        "id": "33f41860.d84ed",
        "type": "http request",
        "z": "ecb0dc75.e2c838",
        "name": "Nilaqua® Alcohol Free Sanitiser PLUS",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://norinse.co.uk/product/nilaqua-alcohol-free-sanitiser-plus-5-litre/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 390,
        "y": 240,
        "wires": [
            [
                "e9cf40d4.9ad888"
            ]
        ]
    },
    {
        "id": "7270431d.6b3474",
        "type": "change",
        "z": "ecb0dc75.e2c838",
        "name": "Extract Price",
        "rules": [
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "<span class=\"woocommerce-Price-currencySymbol\">&#xA3;</span>",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 240,
        "wires": [
            [
                "b58ce3e.ff5eda"
            ]
        ]
    },
    {
        "id": "f8ba7cbd.09934",
        "type": "function",
        "z": "ecb0dc75.e2c838",
        "name": "Push Date/Name to Array",
        "func": "var now = new Date()\nvar x = now.toLocaleString()\nmsg.datetime = x\n\nvar productName = \"Prosan Hand Sanitiser 0% alcohol\";\nmsg.payload.splice(0,0,productName);\nmsg.payload.splice(0,0,msg.datetime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 240,
        "wires": [
            [
                "7270431d.6b3474"
            ]
        ]
    },
    {
        "id": "1194fb10.b88485",
        "type": "debug",
        "z": "ecb0dc75.e2c838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1430,
        "y": 120,
        "wires": []
    },
    {
        "id": "b58ce3e.ff5eda",
        "type": "GSheet",
        "z": "ecb0dc75.e2c838",
        "creds": "8acedcb.f54ab2",
        "method": "append",
        "action": "",
        "sheet": "1fHPUF2KfFEvg23703923vds4V3-0wtgIPYlmhr9mrX8",
        "cells": "PriceMonitor!A2",
        "name": "Add row",
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "1194fb10.b88485"
            ]
        ]
    },
    {
        "id": "a66641fa.83a3a8",
        "type": "html",
        "z": "ecb0dc75.e2c838",
        "name": "Get paragraph",
        "property": "payload",
        "outproperty": "payload",
        "tag": ".ecomProductPriceMore",
        "ret": "html",
        "as": "single",
        "x": 640,
        "y": 300,
        "wires": [
            [
                "d1d14744.cb6e6"
            ]
        ]
    },
    {
        "id": "bb0390f.064e47",
        "type": "http request",
        "z": "ecb0dc75.e2c838",
        "name": "ThermoGel 5 Litre 70%",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://www.thermogel.co.uk/shop/hand-sanitizer/thermogel-5-litre-hand-surface-sanitiser-bulk-drum-free-shipping/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "a66641fa.83a3a8"
            ]
        ]
    },
    {
        "id": "6207b6b5.db0a38",
        "type": "change",
        "z": "ecb0dc75.e2c838",
        "name": "Extract Price",
        "rules": [
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "Price:",
                "fromt": "str",
                "to": "",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "&#xA3;",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "b58ce3e.ff5eda"
            ]
        ]
    },
    {
        "id": "d1d14744.cb6e6",
        "type": "function",
        "z": "ecb0dc75.e2c838",
        "name": "Push Date/Name to Array",
        "func": "var now = new Date()\nvar x = now.toLocaleString()\nmsg.datetime = x\n\nvar productName = \"ThermoGel 5 Litre 70%\";\nmsg.payload.splice(0,0,productName);\nmsg.payload.splice(0,0,msg.datetime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 300,
        "wires": [
            [
                "6207b6b5.db0a38"
            ]
        ]
    },
    {
        "id": "12519fdf.f8628",
        "type": "html",
        "z": "ecb0dc75.e2c838",
        "name": "Get paragraph",
        "property": "payload",
        "outproperty": "payload",
        "tag": "#optProdVAT",
        "ret": "html",
        "as": "single",
        "x": 640,
        "y": 360,
        "wires": [
            [
                "45593247.753364"
            ]
        ]
    },
    {
        "id": "c9321587.f7c85",
        "type": "http request",
        "z": "ecb0dc75.e2c838",
        "name": "Sabel 5 Litre 70%",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://www.allianceonline.co.uk/antibacterial-hand-sanitiser-spcs0001.html",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 330,
        "y": 360,
        "wires": [
            [
                "12519fdf.f8628"
            ]
        ]
    },
    {
        "id": "c518a28d.79ca98",
        "type": "change",
        "z": "ecb0dc75.e2c838",
        "name": "Extract Price",
        "rules": [
            {
                "t": "change",
                "p": "payload[2]",
                "pt": "msg",
                "from": "Inc. VAT: &#xA3;",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 360,
        "wires": [
            [
                "b58ce3e.ff5eda"
            ]
        ]
    },
    {
        "id": "45593247.753364",
        "type": "function",
        "z": "ecb0dc75.e2c838",
        "name": "Push Date/Name to Array",
        "func": "var now = new Date()\nvar x = now.toLocaleString()\nmsg.datetime = x\n\nvar productName = \"Sabel 5 Litre 70%\";\nmsg.payload.splice(0,0,productName);\nmsg.payload.splice(0,0,msg.datetime);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "c518a28d.79ca98"
            ]
        ]
    },
    {
        "id": "e4e1c7ad.9a724",
        "type": "switch",
        "z": "15a0d5c9.3b9b92",
        "name": "Check ApproximateReceiveCount",
        "property": "payload.Attributes.ApproximateReceiveCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "a6c9e422.6aaea"
            ]
        ]
    },
    {
        "id": "f0603a6c.8d23e8",
        "type": "http in",
        "z": "7f949f4.debdf6",
        "name": "Receive contact form",
        "url": "/contact_form",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "fd5122c6.487b78",
                "1afcf994.1fa71e",
                "8393c236.520e28"
            ]
        ]
    },
    {
        "id": "9a3de1b4.705f78",
        "type": "debug",
        "z": "7f949f4.debdf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "b2fe7dbd.26c1e",
        "type": "AWS DynamoDB",
        "z": "15a0d5c9.3b9b92",
        "aws": "a76d987b.d992d",
        "operation": "PutItem",
        "RequestItems": "",
        "TableName": "DEXdataBackup",
        "BackupName": "",
        "GlobalTableName": "",
        "ReplicationGroup": "",
        "AttributeDefinitions": "",
        "KeySchema": "",
        "ProvisionedThroughput": "",
        "BackupArn": "",
        "Key": "",
        "ResourceArn": "",
        "Item": "test",
        "TargetTableName": "",
        "SourceTableName": "",
        "Tags": "",
        "TagKeys": "",
        "PointInTimeRecoverySpecification": "",
        "ReplicaUpdates": "",
        "TimeToLiveSpecification": "",
        "name": "Back-up DEX messages",
        "x": 560,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "56d2626e.a70a8c",
        "type": "GSheet",
        "z": "7f949f4.debdf6",
        "creds": "8acedcb.f54ab2",
        "method": "append",
        "action": "",
        "sheet": "1_LxYh5puWtTfyfFmLd7wQh47vg1z4L9tw5VqmQhEkTU",
        "cells": "FormSubmissions!A2",
        "name": "Add row",
        "x": 820,
        "y": 180,
        "wires": [
            [
                "9a3de1b4.705f78"
            ]
        ]
    },
    {
        "id": "ab44d67e.d3cc1",
        "type": "debug",
        "z": "ecb0dc75.e2c838",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1300,
        "y": 260,
        "wires": []
    },
    {
        "id": "8393c236.520e28",
        "type": "change",
        "z": "7f949f4.debdf6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.[costcutterAccountNumber, storeName, storeAddress, storePostcode, storeContactName, storeContactNumber, bdmName, bdmEmail, branding, floorstandingQuantity, tabletopQuantity, solutionType, solutionQuantity, shippingChargesAcknowledge]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "56d2626e.a70a8c"
            ]
        ]
    },
    {
        "id": "fd5122c6.487b78",
        "type": "http response",
        "z": "7f949f4.debdf6",
        "name": "Send http response",
        "statusCode": "200",
        "headers": {},
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "ad745ac7.371798",
        "type": "http request",
        "z": "7f949f4.debdf6",
        "name": "POST to Excel",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://prod-08.uksouth.logic.azure.com:443/workflows/f844dc78c2af462cbae56f1722c2cf04/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=KlVJp9P7LNzH3tkw2Vmzot7P4-LnNHyr_3B4iioBApk",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 800,
        "y": 240,
        "wires": [
            [
                "9a3de1b4.705f78"
            ]
        ]
    },
    {
        "id": "1afcf994.1fa71e",
        "type": "simpletime",
        "z": "7f949f4.debdf6",
        "name": "",
        "x": 410,
        "y": 240,
        "wires": [
            [
                "cf6c5a6.742c3a8"
            ]
        ]
    },
    {
        "id": "cf6c5a6.742c3a8",
        "type": "function",
        "z": "7f949f4.debdf6",
        "name": "Add time to Payload",
        "func": "var rawTime = msg.myrawdate;\n\nmsg.payload.rawTime = rawTime;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 240,
        "wires": [
            [
                "ad745ac7.371798"
            ]
        ]
    },
    {
        "id": "ce0c78cf.c533a8",
        "type": "inject",
        "z": "812297d7.4a626",
        "name": "Check number of leads",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "5ed37ee.a3b688"
            ]
        ]
    },
    {
        "id": "6421adcb.0955c4",
        "type": "http request",
        "z": "812297d7.4a626",
        "name": "Get Total Leads",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://api-v1.prospect365.com/Leads/$count?$filter=contains(Description, 'sanitiser')",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "487d1d1b.8aac24"
            ]
        ]
    },
    {
        "id": "545322c5.f9f2c4",
        "type": "debug",
        "z": "812297d7.4a626",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1210,
        "y": 120,
        "wires": []
    },
    {
        "id": "487d1d1b.8aac24",
        "type": "GSheet",
        "z": "812297d7.4a626",
        "creds": "8acedcb.f54ab2",
        "method": "update",
        "action": "",
        "sheet": "1un-cRNKri9mc5K32EdyrPmrILUekxj1sIqZXFW79GDE",
        "cells": "Sheet1!B2",
        "name": "Add Total leads",
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ca8d72a1.abc65",
        "type": "GSheet",
        "z": "812297d7.4a626",
        "creds": "8acedcb.f54ab2",
        "method": "update",
        "action": "",
        "sheet": "1un-cRNKri9mc5K32EdyrPmrILUekxj1sIqZXFW79GDE",
        "cells": "Sheet1!C2",
        "name": "Add Web leads",
        "x": 850,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "66d9c603.0ee2d8",
        "type": "http request",
        "z": "812297d7.4a626",
        "name": "Get Web Leads",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://api-v1.prospect365.com/Leads/$count?&$filter=contains(SourceId, 'WEB') and contains(Description, 'sanitiser')",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 580,
        "y": 180,
        "wires": [
            [
                "ca8d72a1.abc65"
            ]
        ]
    },
    {
        "id": "5ed37ee.a3b688",
        "type": "function",
        "z": "812297d7.4a626",
        "name": "Set Bearer Token",
        "func": "msg.headers = {\n    Authorization: \"Bearer \"+\"a187f0827402b6e7be3da3bbb7835d71\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "66d9c603.0ee2d8",
                "6421adcb.0955c4",
                "4d689715.a814c8",
                "8efbab7.8121bd8"
            ]
        ]
    },
    {
        "id": "317bf520.89ce9a",
        "type": "GSheet",
        "z": "812297d7.4a626",
        "creds": "8acedcb.f54ab2",
        "method": "update",
        "action": "",
        "sheet": "1un-cRNKri9mc5K32EdyrPmrILUekxj1sIqZXFW79GDE",
        "cells": "Sheet1!D2",
        "name": "Add Newsletter leads",
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4d689715.a814c8",
        "type": "http request",
        "z": "812297d7.4a626",
        "name": "Get Newsletter Leads",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://api-v1.prospect365.com/Leads/$count?&$filter=contains(SourceId, 'E-SHOT') and contains(Description, 'sanitiser')",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 600,
        "y": 240,
        "wires": [
            [
                "317bf520.89ce9a"
            ]
        ]
    },
    {
        "id": "4a75f887.2633b8",
        "type": "GSheet",
        "z": "812297d7.4a626",
        "creds": "8acedcb.f54ab2",
        "method": "update",
        "action": "",
        "sheet": "1un-cRNKri9mc5K32EdyrPmrILUekxj1sIqZXFW79GDE",
        "cells": "Sheet1!E2",
        "name": "Add Direct Email leads",
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8efbab7.8121bd8",
        "type": "http request",
        "z": "812297d7.4a626",
        "name": "Get Newsletter Leads",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "https://api-v1.prospect365.com/Leads/$count?&$filter=contains(SourceId, '8ac76c') and contains(Description, 'sanitiser')",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 600,
        "y": 300,
        "wires": [
            [
                "4a75f887.2633b8"
            ]
        ]
    },
    {
        "id": "d3932164.25316",
        "type": "bigquery insert",
        "z": "15a0d5c9.3b9b92",
        "bigquery": "e288eb3f.29a54",
        "dataset": "Critica_Data",
        "table": "Sales",
        "name": "Write Critica to BigQuery",
        "x": 1210,
        "y": 760,
        "wires": []
    },
    {
        "id": "400fe382.8249a4",
        "type": "change",
        "z": "15a0d5c9.3b9b92",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "time",
                "pt": "msg",
                "to": "$now()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 840,
        "wires": [
            [
                "927b56f.166ba28"
            ]
        ]
    },
    {
        "id": "c8f2f40e.6c8f",
        "type": "inject",
        "z": "15a0d5c9.3b9b92",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 780,
        "wires": [
            [
                "400fe382.8249a4"
            ]
        ]
    },
    {
        "id": "927b56f.166ba28",
        "type": "moment",
        "z": "15a0d5c9.3b9b92",
        "name": "",
        "topic": "",
        "input": "time",
        "inputType": "msg",
        "inTz": "Europe/London",
        "adjAmount": "1",
        "adjType": "hours",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss",
        "locale": "en_US",
        "output": "real_timezone",
        "outputType": "msg",
        "outTz": "Europe/London",
        "x": 420,
        "y": 780,
        "wires": [
            [
                "d56f6434.5abe78"
            ]
        ]
    },
    {
        "id": "ea3033fc.83a9f8",
        "type": "function",
        "z": "15a0d5c9.3b9b92",
        "name": "Set rejectUnauthorized",
        "func": "msg.rejectUnauthorized = false; \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 780,
        "wires": [
            [
                "ba34566c.37a9"
            ]
        ]
    },
    {
        "id": "ba34566c.37a9",
        "type": "http request",
        "z": "15a0d5c9.3b9b92",
        "name": "Get Yesterday's sale from Critica",
        "method": "GET",
        "ret": "obj",
        "paytoqs": false,
        "url": "https://critica.promate.com/odata/ODataFilters/{{{real_timezone_minus10mins}}}_{{{real_timezone}}}?$orderby=TxTime",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "basic",
        "x": 740,
        "y": 840,
        "wires": [
            [
                "894bc035.4b7e",
                "1e21880e.6a5cd8"
            ]
        ]
    },
    {
        "id": "d56f6434.5abe78",
        "type": "moment",
        "z": "15a0d5c9.3b9b92",
        "name": "",
        "topic": "",
        "input": "real_timezone",
        "inputType": "msg",
        "inTz": "Europe/London",
        "adjAmount": "10",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "YYYY-MM-DDTHH:mm:ss",
        "locale": "en_US",
        "output": "real_timezone_minus10mins",
        "outputType": "msg",
        "outTz": "Europe/London",
        "x": 420,
        "y": 840,
        "wires": [
            [
                "ea3033fc.83a9f8"
            ]
        ]
    },
    {
        "id": "894bc035.4b7e",
        "type": "bigsplitter",
        "z": "15a0d5c9.3b9b92",
        "name": "Split Array",
        "property": "payload.value",
        "x": 970,
        "y": 840,
        "wires": [
            [
                "d3932164.25316"
            ],
            []
        ]
    }
]